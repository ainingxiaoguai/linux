95.关键字static的作用是什么？

在 C 语言中，关键字 static 有三个明显的作用：

1).在函数体，一个被声明为静态的变量在这一函数被调用过程中维持其值不变。

2).在模块内（但在函数体外），一个被声明为静态的变量可以被模块内所用函数访问，但

不能被模块外其它函数访问。它是一个本地的全局变量。

3).在模块内，一个被声明为静态的函数只可被这一模块内的其它函数调用。那就是，这个

函数被限制在声明它的模块的本地范围内使用。

Const

96.关键字const是什么含意？

const int a;

int const a;

const int *a;

int * const a;

int const * a const;

前两个的作用是一样，a是一个常整型数。第三个意味着 a是一个指向常整型数的指针（也

就是，整型数是不可修改的，但指针可以）。第四个意思 a 是一个指向整型数的常指针（也

就是说，指针指向的整型数是可以修改的，但指针是不可修改的）。最后一个意味着 a 是一

个指向常整型数的常指针（也就是说，指针指向的整型数是不可修改的，同时指针也是不可

修改的）。如果应试者能正确回答这些问题，那么他就给我留下了一个好印象。顺带提一句，

也许你可能会问，即使不用关键字 const，也还是能很容易写出功能正确的程序，那么我为

什么还要如此看重关键字 const 呢？我也如下的几下理由：

1). 关键字 const 的作用是为给读你代码的人传达非常有用的信息，实际上，声明一个参数

为常量是为了告诉了用户这个参数的应用目的。如果你曾花很多时间清理其它人留下的垃

圾，你就会很快学会感谢这点多余的信息。（当然，懂得用 const 的程序员很少会留下的垃

圾让别人来清理的。）

2). 通过给优化器一些附加的信息，使用关键字 const 也许能产生更紧凑的代码。

3). 合理地使用关键字 const 可以使编译器很自然地保护那些不希望被改变的参数，防止其

被无意的代码修改。简而言之，这样可以减少 bug 的出现。

Volatile

97.关键字volatile有什么含意 并给出三个不同的例子。

一个定义为 volatile 的变量是说这变量可能会被意想不到地改变，这样，编译器就不会去假

设这个变量的值了。精确地说就是，优化器在用到这个变量时必须每次都小心地重新读取这

个变量的值，而不是使用保存在寄存器里的备份。下面是 volatile 变量的几个例子：

1). 并行设备的硬件寄存器（如：状态寄存器）

2). 一个中断服务子程序中会访问到的非自动变量(Non-automatic variables)

3). 多线程应用中被几个任务共享的变量

回答不出这个问题的人是不会被雇佣的。我认为这是区分 C 程序员和嵌入

式系统程序员的

最基本的问题。嵌入式系统程序员经常同硬件、中断、RTOS等等打交道，所用这些都要求

volatile 变量。不懂得 volatile 内容将会带来灾难。 假设被面试者正确地回答了这是问题（嗯，怀疑这否会是这样），我将稍微深究一下，看一

下这家伙是不是直正懂得 volatile 完全的重要性。

1). 一个参数既可以是 const 还可以是 volatile 吗？解释为什么。

2). 一个指针可以是 volatile 吗？解释为什么。

3). 下面的函数有什么错误：

int square(volatile int *ptr)

{

return *ptr * *ptr;

}

下面是答案：

1). 是的。一个例子是只读的状态寄存器。它是 volatile 因为它可能被意想不到地改变。它

是 const 因为程序不应该试图去修改它。

2). 是的。尽管这并不很常见。一个例子是当一个中服务子程序修该一个指向一个 buffer 的

指针时。

3). 这段代码的有个恶作剧。这段代码的目的是用来返指针*ptr 指向值的平方，但是，由于

*ptr指向一个 volatile 型参数，编译器将产生类似下面的代码：

int square(volatile int *ptr)

{

int a,b;

a = *ptr;

b = *ptr;

return a * b;

}

由于*ptr的值可能被意想不到地该变，因此 a和 b 可能是不同的。结果，这段代码可能返不

是你所期望的平方值！正确的代码如下：

long square(volatile int *ptr)

{

int a;

a = *ptr;

return a * a;

}
